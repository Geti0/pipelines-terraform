name: Web Pipeline

# This pipeline builds and deploys the frontend and Lambda function
# Note: This runs after the Terraform Pipeline completes infrastructure deployment

on:
  workflow_run:
    workflows: ["Terraform Pipeline"]
    types:
      - completed
  workflow_dispatch:
    # Also allow manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # Only run if the terraform pipeline succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Debug - Check trigger event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow run name: ${{ github.event.workflow_run.name }}"
          echo "This should only run after Terraform Pipeline succeeds or via manual dispatch"
      
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install frontend dependencies
        run: |
          cd web/frontend
          npm install
      
      - name: Lint JS
        run: |
          cd web/frontend
          npx eslint .
      
      - name: Lint CSS
        run: |
          cd web/frontend
          npx stylelint "**/*.css"
      
      - name: Run frontend tests
        run: |
          cd web/frontend
          npx jest --coverage
      
      - name: Build static site
        run: |
          cd web/frontend
          npx vite build
      
      - name: Install Lambda dependencies
        run: |
          cd web/lambda
          npm install
      
      - name: Lint Lambda
        run: |
          cd web/lambda
          npx eslint index.js
      
      - name: Run Lambda tests
        run: |
          cd web/lambda
          npx jest --coverage
      
      - name: Wait for Infrastructure (if on main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Waiting for infrastructure to be ready..."
          sleep 60  # Wait 1 minute for Terraform pipeline to complete
      
      - name: Set up Terraform
        if: github.ref == 'refs/heads/main'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      
      - name: Check Infrastructure and Deploy
        if: github.ref == 'refs/heads/main'
        run: |
          cd infra/terraform
          terraform init
          
          echo "=== Debugging Infrastructure State ==="
          echo "Current directory: $(pwd)"
          echo "Files in terraform directory:"
          ls -la
          echo ""
          echo "Terraform state list:"
          terraform state list || echo "No state found or command failed"
          echo ""
          echo "Terraform workspace:"
          terraform workspace show || echo "Workspace command failed"
          echo ""
          
          # Check if terraform apply was actually successful by looking for specific resources
          if terraform state list | grep -q "aws_s3_bucket\|aws_cloudfront_distribution"; then
            echo "✅ Core infrastructure resources found in state"
            
            # Get outputs with better error handling
            echo "=== Getting Infrastructure Outputs ==="
            S3_BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null | head -n1 | tr -d '\n' || echo "")
            CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null | head -n1 | tr -d '\n' || echo "")
            LAMBDA_NAME=$(terraform output -raw lambda_function_name 2>/dev/null | head -n1 | tr -d '\n' || echo "")
            
            echo "Raw outputs:"
            echo "S3_BUCKET='$S3_BUCKET'"
            echo "CLOUDFRONT_ID='$CLOUDFRONT_ID'" 
            echo "LAMBDA_NAME='$LAMBDA_NAME'"
            
            if [ -n "$S3_BUCKET" ] && [ -n "$CLOUDFRONT_ID" ]; then
              echo "✅ Valid outputs found, proceeding with deployment"
              
              # Deploy to S3
              echo "Deploying frontend to S3..."
              aws s3 sync ../../web/frontend/dist s3://$S3_BUCKET --delete
              
              # Update Lambda if available
              if [ -n "$LAMBDA_NAME" ]; then
                echo "Creating Lambda deployment package..."
                cd ../../web/lambda
                zip -r ../lambda_function.zip . -x "coverage/*" "__tests__/*" "*.test.js" "jest.config.js" "eslint.config.js"
                
                echo "Updating Lambda function..."
                aws lambda update-function-code --function-name $LAMBDA_NAME --zip-file fileb://../lambda_function.zip
                cd ../../infra/terraform
              fi
              
              # Invalidate CloudFront
              echo "Invalidating CloudFront cache..."
              aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"
              
              echo "✅ Web deployment completed successfully!"
            else
              echo "❌ Infrastructure outputs are empty or invalid"
              echo "This suggests the Terraform pipeline didn't complete properly"
              echo "Check the Terraform Pipeline logs for errors"
              exit 1
            fi
          else
            echo "❌ No core infrastructure resources found in Terraform state"
            echo "This means the Terraform pipeline failed or didn't run"
            echo "Expected resources: aws_s3_bucket, aws_cloudfront_distribution"
            echo "Please check the Terraform Pipeline workflow for errors"
            exit 1
          fi
