name: Web Pipeline Test

# Test version of web pipeline that bypasses Parameter Store for testing
# This version uses mock values to test the pipeline logic

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode with mock values'
        required: false
        default: 'true'

jobs:
  web-pipeline-test:
    runs-on: ubuntu-latest
    steps:
      # ==============================================
      # INSTALL PHASE - Web Development Tools
      # ==============================================
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            web/frontend/package-lock.json
            web/lambda/package-lock.json
      
      - name: Install System Dependencies
        run: |
          # Install bc for arithmetic operations (if needed)
          sudo apt-get update
          sudo apt-get install -y bc
      
      - name: Install Frontend Dependencies
        working-directory: ./web/frontend
        run: npm ci
      
      - name: Install Lambda Dependencies
        working-directory: ./web/lambda
        run: npm ci
          
      # ==============================================
      # PRE-BUILD PHASE - Web Quality Checks
      # ==============================================
      - name: Frontend Quality Checks
        working-directory: ./web/frontend
        run: |
          echo "=== FRONTEND QUALITY CHECKS ==="
          
          echo "Running ESLint on frontend..."
          npx eslint . --ext .js,.html || echo "ESLint warnings found"
          
          echo "Running frontend tests with coverage..."
          npm test -- --coverage --coverageReporters=text-summary
          
          # Simple coverage check without jq dependency
          echo "Checking frontend coverage..."
          if [ -f coverage/coverage-summary.json ]; then
            echo "✅ Frontend coverage report generated"
          else
            echo "⚠️ Frontend coverage report not found - tests may have 0% coverage"
          fi
      
      - name: Lambda Quality Checks
        working-directory: ./web/lambda
        run: |
          echo "=== LAMBDA QUALITY CHECKS ==="
          
          echo "Running ESLint on lambda..."
          npx eslint . --ext .js || echo "ESLint warnings found"
          
          echo "Running lambda tests with coverage..."
          npm test -- --coverage --coverageReporters=text-summary
          
          # Simple coverage check without jq dependency
          echo "Checking lambda coverage..."
          if [ -f coverage/coverage-summary.json ]; then
            echo "✅ Lambda coverage report generated"
          else
            echo "⚠️ Lambda coverage report not found"
          fi
          
      # ==============================================
      # BUILD PHASE - Web Application Build (TEST MODE)
      # ==============================================
      - name: Test Parameter Store Access (Optional)
        continue-on-error: true
        run: |
          echo "=== TESTING PARAMETER STORE ACCESS ==="
          
          # Try to access Parameter Store - this will fail if permissions aren't set
          if aws ssm describe-parameters --region eu-north-1 > /dev/null 2>&1; then
            echo "✅ Parameter Store access available"
            
            # Try to get actual values if they exist
            if aws ssm get-parameter --name "/pipelines-terraform/s3-bucket-name" --region eu-north-1 > /dev/null 2>&1; then
              echo "✅ Infrastructure parameters exist"
              USE_REAL_VALUES=true
            else
              echo "⚠️ Infrastructure parameters not found - using mock values"
              USE_REAL_VALUES=false
            fi
          else
            echo "❌ Parameter Store access denied - using mock values for testing"
            USE_REAL_VALUES=false
          fi
          
          echo "USE_REAL_VALUES=$USE_REAL_VALUES" >> $GITHUB_ENV
      
      - name: Set Infrastructure Values (Test Mode)
        run: |
          echo "=== SETTING INFRASTRUCTURE VALUES ==="
          
          if [ "$USE_REAL_VALUES" = "true" ]; then
            echo "Using real Parameter Store values..."
            S3_BUCKET=$(aws ssm get-parameter --name "/pipelines-terraform/s3-bucket-name" --query 'Parameter.Value' --output text)
            CLOUDFRONT_ID=$(aws ssm get-parameter --name "/pipelines-terraform/cloudfront-distribution-id" --query 'Parameter.Value' --output text)
            CLOUDFRONT_DOMAIN=$(aws ssm get-parameter --name "/pipelines-terraform/cloudfront-domain-name" --query 'Parameter.Value' --output text)
            API_GATEWAY_URL=$(aws ssm get-parameter --name "/pipelines-terraform/api-gateway-url" --query 'Parameter.Value' --output text)
            LAMBDA_FUNCTION_NAME=$(aws ssm get-parameter --name "/pipelines-terraform/lambda-function-name" --query 'Parameter.Value' --output text)
            DYNAMODB_TABLE_NAME=$(aws ssm get-parameter --name "/pipelines-terraform/dynamodb-table-name" --query 'Parameter.Value' --output text)
          else
            echo "Using mock values for testing..."
            S3_BUCKET="test-pipelines-terraform-website-12345678"
            CLOUDFRONT_ID="E1234567890ABC"
            CLOUDFRONT_DOMAIN="d123456789.cloudfront.net"
            API_GATEWAY_URL="https://abcd1234.execute-api.eu-north-1.amazonaws.com/prod/contact"
            LAMBDA_FUNCTION_NAME="pipelines-terraform-contact-form-12345678"
            DYNAMODB_TABLE_NAME="pipelines-terraform-contact-submissions-12345678"
          fi
          
          # Store in GitHub environment for subsequent steps
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
          echo "CLOUDFRONT_ID=$CLOUDFRONT_ID" >> $GITHUB_ENV
          echo "CLOUDFRONT_DOMAIN=$CLOUDFRONT_DOMAIN" >> $GITHUB_ENV
          echo "API_GATEWAY_URL=$API_GATEWAY_URL" >> $GITHUB_ENV
          echo "LAMBDA_FUNCTION_NAME=$LAMBDA_FUNCTION_NAME" >> $GITHUB_ENV
          echo "DYNAMODB_TABLE_NAME=$DYNAMODB_TABLE_NAME" >> $GITHUB_ENV
          
          echo "✅ Infrastructure values set:"
          echo "S3 Bucket: $S3_BUCKET"
          echo "CloudFront Distribution: $CLOUDFRONT_ID"
          echo "CloudFront Domain: $CLOUDFRONT_DOMAIN"
          echo "API Gateway URL: $API_GATEWAY_URL"
          echo "Lambda Function: $LAMBDA_FUNCTION_NAME"
          echo "DynamoDB Table: $DYNAMODB_TABLE_NAME"
      
      - name: Build Frontend Application
        working-directory: ./web/frontend
        run: |
          echo "=== BUILDING FRONTEND APPLICATION ==="
          
          # Create .env file with API Gateway URL for Vite build
          echo "VITE_API_GATEWAY_URL=$API_GATEWAY_URL" > .env
          
          echo "Building frontend with Vite..."
          npm run build
          
          echo "✅ Frontend build completed successfully!"
          
          # Verify build output
          if [ -d "dist" ]; then
            echo "✅ Build directory created"
            ls -la dist/
          else
            echo "❌ Build directory not found"
            exit 1
          fi
          
      # ==============================================
      # POST-BUILD PHASE - Test Deployment Logic
      # ==============================================
      - name: Test Lambda Deployment Package
        working-directory: ./web/lambda
        run: |
          echo "=== TESTING LAMBDA DEPLOYMENT PACKAGE ==="
          
          # Create deployment package
          zip -r lambda-deployment.zip . -x "*.test.js" "jest.config.js" "eslint.config.js" "coverage/*" "node_modules/jest*" "node_modules/@jest*"
          
          # Verify package contents
          echo "Lambda deployment package contents:"
          unzip -l lambda-deployment.zip
          
          # Check package size
          PACKAGE_SIZE=$(stat -f%z lambda-deployment.zip 2>/dev/null || stat -c%s lambda-deployment.zip)
          echo "Package size: $PACKAGE_SIZE bytes"
          
          if [ $PACKAGE_SIZE -gt 52428800 ]; then  # 50MB limit
            echo "❌ Package too large for Lambda"
            exit 1
          else
            echo "✅ Package size acceptable"
          fi
          
          if [ "$USE_REAL_VALUES" = "true" ]; then
            echo "Testing Lambda function update..."
            # Only test if we have real infrastructure
            aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME > /dev/null && echo "✅ Lambda function exists" || echo "⚠️ Lambda function not found"
          else
            echo "✅ Lambda deployment package test completed (mock mode)"
          fi
      
      - name: Test S3 Deployment Logic
        working-directory: ./web/frontend
        run: |
          echo "=== TESTING S3 DEPLOYMENT LOGIC ==="
          
          if [ "$USE_REAL_VALUES" = "true" ]; then
            echo "Testing S3 bucket access..."
            # Only test if we have real infrastructure
            aws s3 ls s3://$S3_BUCKET/ > /dev/null && echo "✅ S3 bucket accessible" || echo "⚠️ S3 bucket not accessible"
          else
            echo "✅ S3 deployment logic test completed (mock mode)"
          fi
          
          # Verify we have files to deploy
          if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
            echo "✅ Frontend files ready for deployment"
            echo "Files to deploy:"
            find dist -type f | head -10
          else
            echo "❌ No frontend files to deploy"
            exit 1
          fi
      
      - name: Test CloudFront Invalidation Logic
        run: |
          echo "=== TESTING CLOUDFRONT INVALIDATION LOGIC ==="
          
          if [ "$USE_REAL_VALUES" = "true" ]; then
            echo "Testing CloudFront distribution access..."
            # Only test if we have real infrastructure
            aws cloudfront get-distribution --id $CLOUDFRONT_ID > /dev/null && echo "✅ CloudFront distribution accessible" || echo "⚠️ CloudFront distribution not accessible"
          else
            echo "✅ CloudFront invalidation logic test completed (mock mode)"
          fi
      
      - name: Pipeline Test Summary
        run: |
          echo "=== PIPELINE TEST SUMMARY ==="
          echo "🎉 Web application pipeline test completed successfully!"
          echo ""
          echo "📊 Test Results:"
          echo "✅ Frontend Quality Checks: PASSED"
          echo "✅ Lambda Quality Checks: PASSED"
          echo "✅ Frontend Build: PASSED"
          echo "✅ Lambda Package Creation: PASSED"
          echo "✅ Deployment Logic Tests: PASSED"
          echo ""
          if [ "$USE_REAL_VALUES" = "true" ]; then
            echo "🔗 Used Real Infrastructure Values:"
            echo "🌐 Website URL: https://$CLOUDFRONT_DOMAIN"
            echo "🔗 API Endpoint: $API_GATEWAY_URL"
          else
            echo "🧪 Used Mock Values for Testing"
            echo "⚠️ Parameter Store access needs to be configured for real deployment"
          fi
