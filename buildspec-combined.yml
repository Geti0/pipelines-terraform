version: 0.2

env:
  variables:
    TF_VERSION: "1.5.0"
    GO_VERSION: "1.19"
    NODE_VERSION: "18"

phases:
  install:
    runtime-versions:
      golang: $GO_VERSION
      nodejs: $NODE_VERSION
    commands:
      - echo "=== INSTALLING ALL DEPENDENCIES ==="
      
      # Install Terraform and infrastructure tools
      - echo Installing Terraform...
      - curl -fsSL https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip -o terraform.zip
      - unzip terraform.zip
      - sudo mv terraform /usr/local/bin/
      - curl -s https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep browser_download_url | grep linux_amd64 | cut -d '"' -f 4 | wget -qi -
      - unzip tflint_linux_amd64.zip
      - sudo mv tflint /usr/local/bin/
      - pip3 install checkov
      
      # Install Node.js dependencies
      - echo Installing Node.js dependencies...
      - cd web/frontend && npm install
      - cd ../lambda && npm install
      - cd ../../
      
  pre_build:
    commands:
      - echo "=== INFRASTRUCTURE QUALITY CHECKS ==="
      
      # Terraform quality checks
      - cd infra/terraform
      - terraform init
      - echo Running Terraform format check...
      - terraform fmt -check
      - echo Running Terraform validation...
      - terraform validate
      - echo Running TFLint...
      - tflint
      - echo Running Checkov security scan...
      - checkov -d . --quiet
      
      # Terratest
      - echo Running Terratest...
      - cd ../test
      - go mod tidy
      - go test -v -timeout 45m -coverprofile=coverage.out -covermode=atomic
      - COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
      - echo "Infrastructure test coverage: $COVERAGE%"
      - echo $COVERAGE | awk '{if ($1+0 >= 60) print "Infrastructure coverage check passed"; else {print "Infrastructure coverage check failed: " $1 "% < 60%"; exit 1}}'
      
      - echo "=== WEB APPLICATION QUALITY CHECKS ==="
      
      # Frontend quality checks
      - cd ../../web/frontend
      - echo Running ESLint on frontend...
      - npx eslint . --max-warnings 0
      - echo Running Stylelint on CSS...
      - npx stylelint "**/*.css"
      - echo Running frontend tests...
      - npx jest --coverage --coverageThreshold='{"global":{"branches":70,"functions":70,"lines":70,"statements":70}}'
      
      # Lambda quality checks
      - cd ../lambda
      - echo Running ESLint on Lambda...
      - npx eslint index.js --max-warnings 0
      - echo Running Lambda tests...
      - npx jest --coverage --coverageThreshold='{"global":{"branches":70,"functions":70,"lines":70,"statements":70}}'
      
  build:
    commands:
      - echo "=== INFRASTRUCTURE DEPLOYMENT ==="
      
      # Deploy infrastructure
      - cd ../../infra/terraform
      - terraform plan -out=tfplan
      - echo Terraform plan created successfully
      - terraform apply tfplan
      - echo Infrastructure deployed successfully
      
      # Get infrastructure outputs immediately
      - echo "Getting infrastructure outputs..."
      - S3_BUCKET=$(terraform output -raw s3_bucket_name)
      - CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id)
      - API_GATEWAY_URL=$(terraform output -raw api_gateway_url)
      - LAMBDA_FUNCTION_NAME=$(terraform output -raw lambda_function_name)
      
      - echo "S3 Bucket: $S3_BUCKET"
      - echo "CloudFront Distribution: $CLOUDFRONT_ID"
      - echo "API Gateway URL: $API_GATEWAY_URL"
      - echo "Lambda Function: $LAMBDA_FUNCTION_NAME"
      
      - echo "=== WEB APPLICATION BUILD ==="
      
      # Build frontend
      - cd ../../web/frontend
      - echo Building frontend with Vite...
      - npx vite build
      - echo Frontend build completed
      
  post_build:
    commands:
      - echo "=== WEB APPLICATION DEPLOYMENT ==="
      
      # Update frontend with API Gateway URL
      - echo Updating frontend with API Gateway URL...
      - cd dist
      - sed -i "s|API_GATEWAY_URL_PLACEHOLDER|$API_GATEWAY_URL|g" *.js || echo "No JS files to update"
      - find . -name "*.js" -exec sed -i "s|API_GATEWAY_URL_PLACEHOLDER|$API_GATEWAY_URL|g" {} \; || echo "No JS files found"
      
      # Deploy frontend to S3
      - echo Deploying frontend to S3...
      - aws s3 sync . s3://$S3_BUCKET --delete
      
      # Deploy Lambda
      - echo Creating Lambda deployment package...
      - cd ../../lambda
      - zip -r ../lambda_function.zip . -x "coverage/*" "__tests__/*" "*.test.js" "jest.config.js" "eslint.config.js"
      
      - echo Updating Lambda function...
      - aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --zip-file fileb://../lambda_function.zip
      
      # Invalidate CloudFront
      - echo Invalidating CloudFront cache...
      - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"
      
      - echo "=== DEPLOYMENT COMPLETED SUCCESSFULLY ==="
      
artifacts:
  files:
    - '**/*'
  base-directory: '.'
